import itertools

# Define the deck of cards
deck = list(itertools.product(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'], ['\u2660', '\u2661', '\u2662', '\u2663']))

# Define the rank of each hand
HAND_RANK = {
    'Royal Flush': 10,
    'Straight Flush': 9,
    'Four of a Kind': 8,
    'Full House': 7,
    'Flush': 6,
    'Straight': 5,
    'Three of a Kind': 4,
    'Two Pair': 3,
    'Pair': 2,
    'High Card': 1
}

def rank_hand(hand):
    """Calculate the rank of a given hand."""
    values = sorted(['2345678910JQKA'.index(card[0]) for card in hand])
    if values == [0, 9, 10, 11, 12]:
        values = [0, 1, 2, 3, 12]
    flush = len(set(card[1] for card in hand)) == 1
    straight = all(values[i] == values[0]+i for i in range(1, 5))
    if flush and straight:
        return 'Royal Flush'
    elif flush:
        return 'Flush'
    elif straight:
        return 'Straight'
    elif any(values.count(value) == 4 for value in values):
        return 'Four of a Kind'
    elif any(values.count(value) == 3 for value in values) and any(values.count(value) == 2 for value in values):
        return 'Full House'
    elif any(values.count(value) == 3 for value in values):
        return 'Three of a Kind'
    elif len(set(value for value in values if values.count(value) == 2)) == 2:
        return 'Two Pair'
    elif any(values.count(value) == 2 for value in values):
        return 'Pair'
    else:
        return 'High Card'

def simulate_hand(player_cards, community_cards, num_opponents):
    """Simulate the outcome of a given hand."""
    remaining_cards = [card for card in deck if card not in player_cards and card not in community_cards]
    possible_hands = itertools.combinations(remaining_cards, 2)
    hand_outcomes = {}
    for hand in possible_hands:
        possible_community_cards = itertools.combinations(remaining_cards, 3)
        for community_cards in possible_community_cards:
            all_cards = player_cards + hand + community_cards
            hand_rank = rank_hand(all_cards)
            if hand_rank not in hand_outcomes:
                hand_outcomes[hand_rank] = 0
            hand_outcomes[hand_rank] += 1
    return hand_outcomes

def simulate_game(player_cards, community_cards, num_opponents):
    """Simulate the outcome of a given game."""
    hand_outcomes = simulate_hand(player_cards, community_cards, num_opponents)
    game_out
